@page "/rockpaperscissors"
@using System.Timers
<div class="game-hero text-center py-5 mb-4">
    <h1 class="display-4 fw-bold mb-3">Sten, Saks, Papir</h1>
    <p class="lead mb-0">F√∏rst til 3 point vinder spillet!</p>
</div>
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-6">
            <div class="card shadow-lg border-0 rounded-4">
                <div class="card-body p-5 text-center">
                    <h2 class="mb-2 text-primary fw-bold">üé≤ Sten, Saks, Papir</h2>
                    <div class="mb-4 text-secondary small fst-italic">F√∏rst til 3 point vinder spillet!</div>

                    @if (!gameOver)
                    {
                        <div>
                            <div class="scoreboard d-flex justify-content-between align-items-center mb-4 p-3 rounded-4 shadow-sm bg-light">
                                <div class="fs-5"><span class="text-secondary">Runde:</span> <span class="fw-bold text-primary">@round</span></div>
                                <div class="fs-5">
                                    <span class="me-2">üßë Du</span>
                                    <span class="score-num fw-bold">@playerScore</span>
                                    <span class="mx-2 text-muted">-</span>
                                    <span class="score-num fw-bold">@computerScore</span>
                                    <span class="ms-2">üíª Computer</span>
                                </div>
                                @if ((playerScore == 2 || computerScore == 2) && !gameOver)
                                {
                                    <div class="ms-3 match-point-alert animate__animated animate__pulse animate__infinite">
                                        <span class="badge bg-warning text-dark fs-6"><i class="bi bi-exclamation-triangle-fill me-1"></i>Match point!</span>
                                    </div>
                                }
                            </div>
                            <div class="mb-2 mt-4">
                                <span class="fs-5 fw-semibold text-primary"><i class="bi bi-hand-index-thumb"></i> V√¶lg dit tr√¶k:</span>
                            </div>
                            <div class="mb-4">
                                <button class="btn btn-outline-primary m-1 px-4 py-2 fs-4" @onclick='() => PlayerSelect("sten")' disabled="@(isWaiting)">üóø Sten</button>
                                <button class="btn btn-outline-primary m-1 px-4 py-2 fs-4" @onclick='() => PlayerSelect("saks")' disabled="@(isWaiting)">‚úÇÔ∏è Saks</button>
                                <button class="btn btn-outline-primary m-1 px-4 py-2 fs-4" @onclick='() => PlayerSelect("papir")' disabled="@(isWaiting)">üìÑ Papir</button>
                            </div>
                        </div>
                        <div class="my-4">
                            <div class="slot-emoji fs-1">@currentSlotEmoji</div>
                            @if (isWaiting)
                            {
                                <p class="mt-3 fw-semibold">Computeren v√¶lger...</p>
                            }
                            else if (lastResult != null)
                            {
                                <div class="mt-3">
                                    <p>Du valgte: <b>@playerChoice</b> @emojis.GetValueOrDefault(playerChoice)</p>
                                    <p>Computeren valgte: <b>@computerChoice</b> @emojis.GetValueOrDefault(computerChoice)</p>
                                    <p class="fw-semibold">@lastResult</p>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="mt-3">
                            <h4 class="mb-4">@gameOverMessage</h4>
                            <button class="btn btn-primary px-4 py-2" @onclick="Restart">Spil igen</button>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-lg-4 mt-4 mt-lg-0">
            <div class="card shadow-sm border-0 rounded-4 h-100">
                <div class="card-body p-4">
                    <h5 class="fw-bold mb-3 text-primary">Historik</h5>
                    @if (history.Count == 0)
                    {
                        <p class="text-secondary">Ingen runder spillet endnu.</p>
                    }
                    else
                    {
                        <ul class="list-group list-group-flush">
                            @foreach (var entry in history.Reverse<HistoryEntry>())
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    <span>
                                        <b>Runde @entry.Round:</b> 
                                        <span title="Dit valg">@emojis[entry.Player]</span> vs <span title="Computerens valg">@emojis[entry.Computer]</span>
                                    </span>
                                    <span class="badge bg-@(entry.Result == "Du vinder runden! üèÜ" ? "success" : entry.Result == "Uafgjort! ü§ù" ? "warning text-dark" : "danger")">@entry.Result</span>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    string[] options = { "sten", "saks", "papir" };
    Dictionary<string, string> emojis = new() {
        { "sten", "üóø" },
        { "saks", "‚úÇÔ∏è" },
        { "papir", "üìÑ" }
    };
    int playerScore = 0;
    int computerScore = 0;
    int round = 1;
    string? playerChoice;
    string? computerChoice;
    string? lastResult;
    bool gameOver = false;
    string gameOverMessage = "";
    bool isWaiting = false;
    Random random = new();
    string currentSlotEmoji = "‚ùì";

    List<HistoryEntry> history = new();
    class HistoryEntry
    {
        public int Round { get; set; }
        public string Player { get; set; } = "";
        public string Computer { get; set; } = "";
        public string Result { get; set; } = "";
    }

    async void PlayerSelect(string choice)
    {
        playerChoice = choice;
        lastResult = null;
        isWaiting = true;
        currentSlotEmoji = "‚ùì";
        StateHasChanged();
        await SlotMachineAnimation();
        ComputerMove();
        isWaiting = false;
        StateHasChanged();
    }

    async Task SlotMachineAnimation()
    {
        int cycles = 0;
        int maxCycles = 24; // ca. 2 sekunder
        int delay = 40;
        int delayStep = 12; // hvor meget delay √∏ges pr. cyklus
        int emojiIndex = 0;
        while (cycles < maxCycles)
        {
            currentSlotEmoji = emojis[options[emojiIndex]];
            StateHasChanged();
            await Task.Delay(delay);
            cycles++;
            emojiIndex = (emojiIndex + 1) % options.Length;
            if (cycles > maxCycles / 2) delay += delayStep; // g√∏r den langsommere mod slut
        }
    }

    void ComputerMove()
    {
        computerChoice = options[random.Next(options.Length)];
        currentSlotEmoji = emojis[computerChoice];
        string result;
        if (playerChoice == computerChoice)
        {
            result = lastResult = "Uafgjort! ü§ù";
        }
        else if (
            (playerChoice == "sten" && computerChoice == "saks") ||
            (playerChoice == "saks" && computerChoice == "papir") ||
            (playerChoice == "papir" && computerChoice == "sten")
        )
        {
            result = lastResult = "Du vinder runden! üèÜ";
            playerScore++;
        }
        else
        {
            result = lastResult = "Computeren vinder runden! üíª";
            computerScore++;
        }
        history.Add(new HistoryEntry
        {
            Round = round,
            Player = playerChoice!,
            Computer = computerChoice!,
            Result = result
        });
        round++;
        CheckGameOver();
    }

    void CheckGameOver()
    {
        if (playerScore == 3 || computerScore == 3)
        {
            gameOver = true;
            if (playerScore == 3)
                gameOverMessage = "Tillykke! Du har vundet spillet! ü•≥";
            else
                gameOverMessage = "Computeren har vundet spillet. Pr√∏v igen! üò¢";
        }
    }

    void Restart()
    {
        playerScore = 0;
        computerScore = 0;
        round = 1;
        playerChoice = null;
        computerChoice = null;
        lastResult = null;
        gameOver = false;
        gameOverMessage = "";
        isWaiting = false;
        history.Clear();
    }
}

<style>
.game-hero {
    background: linear-gradient(90deg, #1b6ec2 0%, #3a0647 100%);
    color: #fff;
    border-radius: 0 0 2rem 2rem;
    box-shadow: 0 4px 32px rgba(27,110,194,0.10);
    margin-top: -20px;
}

.spinner-border {
    width: 3rem;
    height: 3rem;
}
.slot-emoji {
    transition: transform 0.1s;
    display: inline-block;
    animation: slot-bounce 0.2s;
}
@@keyframes slot-bounce {
    0% { transform: scale(1.2); }
    100% { transform: scale(1); }
}
.scoreboard {
    background: linear-gradient(90deg, #eaf1fb 0%, #f8f9fa 100%);
    border: 1.5px solid #d0e2ff;
    font-family: 'Segoe UI', sans-serif;
}
.score-num {
    font-size: 1.7rem;
    color: #1b6ec2;
}
.match-point-alert {
    animation: matchpoint-blink 1s infinite;
}
@@keyframes matchpoint-blink {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.4; }
}
</style>


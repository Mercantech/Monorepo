@page "/type-racer"
@using System.Timers

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">Type Racer</h1>
            
            @if (!isGameStarted)
            {
                <button class="btn btn-primary mb-4" @onclick="StartGame">Start Spil</button>
            }
            else
            {
                <div class="text-display mb-3 p-3 border rounded">
                    @for (int i = 0; i < currentText.Length; i++)
                    {
                        var charClass = i < typedText.Length 
                            ? (typedText[i] == currentText[i] ? "correct" : "incorrect") 
                            : (i == typedText.Length ? "current" : "");
                        <span class="@charClass">@currentText[i]</span>
                    }
                </div>

                <div class="input-group mb-3">
                    <input type="text" 
                           class="form-control" 
                           @bind="typedText" 
                           @bind:event="oninput"
                           @onkeyup="HandleKeyUp"
                           disabled="@isGameCompleted"
                           placeholder="Begynd at skrive her..." />
                </div>

                <div class="stats mb-3">
                    <p>Tid: @Math.Round(elapsedTime, 2) sekunder</p>
                    @if (isGameCompleted)
                    {
                        <div class="alert alert-success">
                            <h4>Resultater:</h4>
                            <p>WPM (Ord per minut): @Math.Round(wpm, 2)</p>
                            <p>Nøjagtighed: @accuracy%</p>
                            <button class="btn btn-primary" @onclick="RestartGame">Prøv igen</button>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<style>
    .text-display {
        font-size: 1.2rem;
        line-height: 1.6;
        background-color: #f8f9fa;
    }

    .correct {
        color: #28a745;
    }

    .incorrect {
        color: #dc3545;
        text-decoration: underline wavy #dc3545;
    }

    .current {
        background-color: #ffc107;
    }
</style>

@code {
    private string[] sampleTexts = new[]
    {
        "Den hurtige brune ræv hopper over den dovne hund.",
        "Programmering er kunsten at fortælle en computer, hvad den skal gøre.",
        "I TypeRacer skal du skrive så hurtigt og præcist som muligt."
    };

    private string currentText = "";
    private string typedText = "";
    private bool isGameStarted = false;
    private bool isGameCompleted = false;
    private DateTime startTime;
    private double elapsedTime = 0;
    private double wpm = 0;
    private double accuracy = 0;
    private Timer timer;

    protected override void OnInitialized()
    {
        timer = new Timer(1000);
        timer.Elapsed += (sender, e) =>
        {
            elapsedTime = (DateTime.Now - startTime).TotalSeconds;
            InvokeAsync(StateHasChanged);
        };
    }

    private void StartGame()
    {
        var random = new Random();
        currentText = sampleTexts[random.Next(sampleTexts.Length)];
        typedText = "";
        isGameStarted = true;
        isGameCompleted = false;
        startTime = DateTime.Now;
        elapsedTime = 0;
        timer.Start();
    }

    private void RestartGame()
    {
        StartGame();
    }

    private void HandleKeyUp()
    {
        if (typedText.Length >= currentText.Length)
        {
            GameCompleted();
        }
    }

    private void GameCompleted()
    {
        timer.Stop();
        isGameCompleted = true;
        
        // Beregn WPM (antager gennemsnitlig ordlængde på 5 tegn)
        int charactersPerWord = 5;
        double minutes = elapsedTime / 60;
        wpm = Math.Round((currentText.Length / charactersPerWord) / minutes, 2);

        // Beregn nøjagtighed baseret på total antal skrevne tegn
        accuracy = Math.Round((double)currentText.Length / typedText.Length * 100, 2);
    }

    public void Dispose()
    {
        timer?.Dispose();
    }
}
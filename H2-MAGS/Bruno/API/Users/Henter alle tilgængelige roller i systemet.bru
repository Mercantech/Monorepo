meta {
  name: Henter alle tilgængelige roller i systemet.
  type: http
  seq: 6
}

get {
  url: {{baseUrl}}/api/Users/roles
  body: none
  auth: none
}

headers {
  Authorization: {{apiKey}}
}

tests {
  // Test at responset er succesfuldt
  test("Status kode skal være 200", function() {
    expect(res.status).to.equal(200);
  });
  
  // Test at responset er et array
  test("Response skal være et array", function() {
    expect(Array.isArray(res.body)).to.be.true;
  });
  
  // Test at der er præcis 4 roller
  test("Der skal være præcis 4 roller", function() {
    expect(res.body).to.have.lengthOf(4);
  });
  
  // Test at alle roller har de forventede egenskaber
  test("Alle roller skal have id, name og description egenskaber", function() {
    res.body.forEach((role, index) => {
      expect(role).to.have.property('id');
      expect(role).to.have.property('name');
      expect(role).to.have.property('description');
      expect(typeof role.id).to.equal('string');
      expect(typeof role.name).to.equal('string');
      expect(typeof role.description).to.equal('string');
    });
  });
  
  // Test specifik rolle: User (id: "1")
  test("Rolle 'User' skal være til stede med korrekte egenskaber", function() {
    const userRole = res.body.find(role => role.id === "1");
    expect(userRole).to.not.be.undefined;
    expect(userRole.name).to.equal("User");
    expect(userRole.description).to.equal("Standard bruger med basis rettigheder");
  });
  
  // Test specifik rolle: CleaningStaff (id: "2")
  test("Rolle 'CleaningStaff' skal være til stede med korrekte egenskaber", function() {
    const cleaningRole = res.body.find(role => role.id === "2");
    expect(cleaningRole).to.not.be.undefined;
    expect(cleaningRole.name).to.equal("CleaningStaff");
    expect(cleaningRole.description).to.equal("Rengøringspersonale med adgang til rengøringsmoduler");
  });
  
  // Test specifik rolle: Reception (id: "3")
  test("Rolle 'Reception' skal være til stede med korrekte egenskaber", function() {
    const receptionRole = res.body.find(role => role.id === "3");
    expect(receptionRole).to.not.be.undefined;
    expect(receptionRole.name).to.equal("Reception");
    expect(receptionRole.description).to.equal("Receptionspersonale med adgang til booking og gæster");
  });
  
  // Test specifik rolle: Admin (id: "4")
  test("Rolle 'Admin' skal være til stede med korrekte egenskaber", function() {
    const adminRole = res.body.find(role => role.id === "4");
    expect(adminRole).to.not.be.undefined;
    expect(adminRole.name).to.equal("Admin");
    expect(adminRole.description).to.equal("Administrator med fuld adgang til systemet");
  });
  
  // Test at alle ID'er er unikke
  test("Alle rolle ID'er skal være unikke", function() {
    const ids = res.body.map(role => role.id);
    const uniqueIds = [...new Set(ids)];
    expect(uniqueIds).to.have.lengthOf(4);
  });
  
  // Test at alle navne er unikke
  test("Alle rolle navne skal være unikke", function() {
    const names = res.body.map(role => role.name);
    const uniqueNames = [...new Set(names)];
    expect(uniqueNames).to.have.lengthOf(4);
  });
  
  // Test at responset ikke er tomt
  test("Response skal ikke være tom", function() {
    expect(res.body).to.not.be.empty;
  });
}

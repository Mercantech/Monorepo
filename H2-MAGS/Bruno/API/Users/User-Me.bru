meta {
  name: User/Me
  type: http
  seq: 9
}

get {
  url: {{baseUrl}}/api/Users/me
  body: none
  auth: bearer
}

headers {
  Authorization: {{apiKey}}
}

auth:bearer {
  token: {{JWT-User}}
}

tests {
  // Test status kode
  test("Status kode skal være 200 OK", function() {
    expect(res.status).to.equal(200);
  });
  
  // Test at brugeren er en almindelig User (ikke Admin)
  test("Brugeren skal have User rolle", function() {
    expect(res.body.role).to.equal("User");
  });
  
  // Test at alle påkrævede felter er til stede
  test("Bruger objekt skal have alle påkrævede felter", function() {
    expect(res.body).to.have.property("id");
    expect(res.body).to.have.property("email");
    expect(res.body).to.have.property("username");
    expect(res.body).to.have.property("role");
    expect(res.body).to.have.property("roleDescription");
  });
  
  // Test at roleDescription er korrekt for User
  test("Role description skal være korrekt for User", function() {
    expect(res.body.roleDescription).to.equal("Standard bruger med basis rettigheder");
  });
  
  // Test at ID er et gyldigt UUID
  test("User ID skal være et gyldigt UUID", function() {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i;
    expect(res.body.id).to.match(uuidRegex);
  });
  
  // Test at email er i korrekt format
  test("Email skal være i korrekt format", function() {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    expect(res.body.email).to.match(emailRegex);
  });
  
  // Test at username ikke er tom
  test("Username skal ikke være tom", function() {
    expect(res.body.username).to.not.be.empty;
    expect(res.body.username).to.be.a("string");
  });
}

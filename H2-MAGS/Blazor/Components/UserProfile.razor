@using Blazor.Services
@using System.Text.Json
@using System.Text
@inject AuthenticationService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="vacation-user-profile">
    @if (currentUser != null)
    {
        <div class="card vacation-profile-card">
            <div class="card-header vacation-profile-header d-flex justify-content-between align-items-center">
                <h4 class="mb-0"><i class="bi bi-person-badge-fill me-2"></i>Velkommen til din ferie-profil, @currentUser.Username! üèñÔ∏è</h4>
                <button class="btn btn-outline-danger btn-sm" @onclick="HandleLogout" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                    }
                    else
                    {
                        <i class="bi bi-box-arrow-right me-1"></i>
                    }
                    Log ud
                </button>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6 class="vacation-section-title">üß≥ Rejsende Information</h6>
                        <table class="table table-borderless table-sm">
                            <tbody>
                                <tr>
                                    <td><strong>Email:</strong></td>
                                    <td>@currentUser.Email</td>
                                </tr>
                                <tr>
                                    <td><strong>Brugernavn:</strong></td>
                                    <td>@currentUser.Username</td>
                                </tr>
                                <tr>
                                    <td><strong>Rolle:</strong></td>
                                    <td>
                                        <span class="badge @GetRoleBadgeClass(currentUser.Role)">
                                            @GetRoleDisplayName(currentUser.Role)
                                        </span>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="col-md-6">
                        <h6 class="vacation-section-title">üîê Session Information</h6>
                        <table class="table table-borderless table-sm">
                            <tbody>
                                <tr>
                                    <td><strong>Login Status:</strong></td>
                                    <td>
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-circle me-1"></i>
                                            Logget ind
                                        </span>
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Token Status:</strong></td>
                                    <td>
                                        @if (tokenValidationResult != null)
                                        {
                                            <span class="badge @(tokenValidationResult.IsValid ? "bg-success" : "bg-danger")">
                                                <i class="bi @(tokenValidationResult.IsValid ? "bi-check-circle" : "bi-x-circle") me-1"></i>
                                                @(tokenValidationResult.IsValid ? "Gyldig" : "Ugyldig")
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-warning text-dark">
                                                <i class="bi bi-question-circle me-1"></i>
                                                Ikke valideret
                                            </span>
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td><strong>Token:</strong></td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(tokenPreview))
                                        {
                                            <code class="small">@tokenPreview...</code>
                                            <button class="btn btn-link btn-sm p-0 ms-1" @onclick="ToggleTokenVisibility">
                                                @if (showFullToken)
                                                {
                                                    <i class="bi bi-eye-slash"></i>
                                                }
                                                else
                                                {
                                                    <i class="bi bi-eye"></i>
                                                }
                                            </button>
                                        }
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- JWT Token Analysis Section -->
                @if (!string.IsNullOrEmpty(fullToken) && decodedToken != null)
                {
                    <div class="mt-4">
                        <h6 class="vacation-section-title">üîç JWT Token Analyse</h6>
                        <div class="row">
                            <div class="col-md-4">
                                <div class="jwt-section-card">
                                    <h6 class="jwt-section-header">
                                        <i class="bi bi-file-earmark-text me-2"></i>Header
                                    </h6>
                                    <div class="jwt-section-content">
                                        <pre class="jwt-json">@FormatJson(decodedToken.Header)</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="jwt-section-card">
                                    <h6 class="jwt-section-header">
                                        <i class="bi bi-file-earmark-data me-2"></i>Payload
                                    </h6>
                                    <div class="jwt-section-content">
                                        <pre class="jwt-json">@FormatJson(decodedToken.Payload)</pre>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="jwt-section-card">
                                    <h6 class="jwt-section-header">
                                        <i class="bi bi-shield-check me-2"></i>Signature
                                    </h6>
                                    <div class="jwt-section-content">
                                        <div class="signature-info">
                                            <p><strong>Algoritme:</strong> @(decodedToken.Header.TryGetValue("alg", out var algElementSig) ? algElementSig.GetString() : "Ukendt")</p>
                                            <p><strong>Type:</strong> @(decodedToken.Header.TryGetValue("typ", out var typElementSig) ? typElementSig.GetString() : "JWT")</p>
                                            <p><strong>Signature:</strong></p>
                                            <code class="signature-code">@decodedToken.Signature</code>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Token Validation Details -->
                        @if (tokenValidationResult != null)
                        {
                            <div class="mt-3">
                                <h6 class="text-muted">Token Validering Detaljer</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="validation-details">
                                            <p><strong>Udl√∏bsdato:</strong> @tokenValidationResult.ExpirationTime?.ToString("dd/MM/yyyy HH:mm:ss")</p>
                                            <p><strong>Udgivet:</strong> @tokenValidationResult.IssuedAt?.ToString("dd/MM/yyyy HH:mm:ss")</p>
                                            <p><strong>Udgiver:</strong> @tokenValidationResult.Issuer</p>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="validation-details">
                                            <p><strong>Modtager:</strong> @tokenValidationResult.Audience</p>
                                            <p><strong>Token ID:</strong> @tokenValidationResult.TokenId</p>
                                            <p><strong>Bruger ID:</strong> @tokenValidationResult.UserId</p>
                                        </div>
                                    </div>
                                </div>
                                
                                @if (tokenValidationResult.ValidationErrors.Any())
                                {
                                    <div class="mt-3">
                                        <div class="alert alert-warning">
                                            <h6><i class="bi bi-exclamation-triangle me-2"></i>Valideringsfejl</h6>
                                            <ul class="mb-0">
                                                @foreach (var error in tokenValidationResult.ValidationErrors)
                                                {
                                                    <li>@error</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        
                        <!-- Important Claims Summary -->
                        @if (decodedToken?.Payload != null)
                        {
                            <div class="mt-3">
                                <h6 class="text-muted">Vigtige Claims</h6>
                                <div class="row">
                                    <div class="col-md-6">
                                        <div class="claims-summary">
                                            @if (decodedToken.Payload.TryGetValue("name", out var nameElement))
                                            {
                                                <p><strong>Navn:</strong> @nameElement.GetString()</p>
                                            }
                                            @if (decodedToken.Payload.TryGetValue("email", out var emailElement))
                                            {
                                                <p><strong>Email:</strong> @emailElement.GetString()</p>
                                            }
                                            @if (decodedToken.Payload.TryGetValue("role", out var roleElement))
                                            {
                                                <p><strong>Rolle:</strong> 
                                                    <span class="badge @GetRoleBadgeClass(roleElement.GetString() ?? "")">
                                                        @GetRoleDisplayName(roleElement.GetString() ?? "")
                                                    </span>
                                                </p>
                                            }
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="claims-summary">
                                            @if (decodedToken.Payload.TryGetValue("iat", out var iatElement))
                                            {
                                                <p><strong>Oprettet:</strong> @DateTimeOffset.FromUnixTimeSeconds(iatElement.GetInt64()).DateTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
                                            }
                                            @if (decodedToken.Payload.TryGetValue("exp", out var expElement))
                                            {
                                                <p><strong>Udl√∏ber:</strong> @DateTimeOffset.FromUnixTimeSeconds(expElement.GetInt64()).DateTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
                                            }
                                            @if (decodedToken.Payload.TryGetValue("nbf", out var nbfElement))
                                            {
                                                <p><strong>Ikke gyldig f√∏r:</strong> @DateTimeOffset.FromUnixTimeSeconds(nbfElement.GetInt64()).DateTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                        
                        <!-- Token Actions -->
                        <div class="mt-3">
                            <div class="btn-group" role="group">
                                <button class="btn btn-outline-info btn-sm" @onclick="ValidateToken">
                                    <i class="bi bi-shield-check me-1"></i>
                                    Valider Token
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="CopyTokenToClipboard">
                                    <i class="bi bi-clipboard me-1"></i>
                                    Kopier Token
                                </button>
                                <button class="btn btn-outline-warning btn-sm" @onclick="RefreshToken">
                                    <i class="bi bi-arrow-clockwise me-1"></i>
                                    Forny Token
                                </button>
                                <button class="btn btn-outline-primary btn-sm" @onclick="ToggleFullTokenDisplay">
                                    <i class="bi @(showFullToken ? "bi-eye-slash" : "bi-eye") me-1"></i>
                                    @(showFullToken ? "Skjul" : "Vis") Fuld Token
                                </button>
                            </div>
                        </div>
                        
                        <!-- Signature Validation with Server Key -->
                        <div class="mt-4">
                            <h6 class="vacation-section-title">üîë Signature Validering med Server N√∏gle</h6>
                            <div class="row">
                                <div class="col-md-8">
                                    <div class="signature-validation-card">
                                        <div class="input-group mb-3">
                                            <span class="input-group-text">
                                                <i class="bi bi-key-fill"></i>
                                            </span>
                                            <input type="password" 
                                                   class="form-control" 
                                                   placeholder="Indtast serverens hemmelige n√∏gle for at validere signaturen..."
                                                   @bind="serverSecretKey"
                                                   @onkeyup="OnServerKeyInput" />
                                            <button class="btn btn-outline-success" 
                                                    @onclick="ValidateSignatureWithServerKey" 
                                                    disabled="@string.IsNullOrEmpty(serverSecretKey)">
                                                <i class="bi bi-shield-check me-1"></i>
                                                Valider
                                            </button>
                                        </div>
                                        
                                        @if (!string.IsNullOrEmpty(signatureValidationResult))
                                        {
                                            <div class="alert @(signatureValidationResult.Contains("‚úì") ? "alert-success" : "alert-danger") mt-3">
                                                <h6>
                                                    <i class="bi @(signatureValidationResult.Contains("‚úì") ? "bi-check-circle" : "bi-x-circle") me-2"></i>
                                                    Signature Validering
                                                </h6>
                                                <p class="mb-0">@signatureValidationResult</p>
                                            </div>
                                        }
                                        
                                        <div class="signature-info-details mt-3">
                                            <p><strong>Bem√¶rk:</strong> Server n√∏glen bruges kun til at validere signaturen lokalt. Den sendes ikke til serveren.</p>
                                            <p><strong>Algoritme:</strong> @(decodedToken.Header.TryGetValue("alg", out var algElement) ? algElement.GetString() : "Ukendt")</p>
                                            <p><strong>Token Type:</strong> @(decodedToken.Header.TryGetValue("typ", out var typElement) ? typElement.GetString() : "JWT")</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="signature-status-card">
                                        <h6 class="signature-status-header">
                                            <i class="bi bi-shield-lock me-2"></i>Signature Status
                                        </h6>
                                        <div class="signature-status-content">
                                            @if (isSignatureValid)
                                            {
                                                <div class="signature-valid">
                                                    <i class="bi bi-shield-check text-success"></i>
                                                    <span>Signature er gyldig</span>
                                                </div>
                                            }
                                            else if (hasValidatedSignature)
                                            {
                                                <div class="signature-invalid">
                                                    <i class="bi bi-shield-x text-danger"></i>
                                                    <span>Signature er ugyldig</span>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="signature-unknown">
                                                    <i class="bi bi-shield-question text-warning"></i>
                                                    <span>Ikke valideret</span>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Full Token Display -->
                        @if (showFullToken && !string.IsNullOrEmpty(fullToken))
                        {
                            <div class="mt-3">
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-info-circle me-2"></i>Fuld JWT Token</h6>
                                    <div class="token-display">
                                        <code class="full-token-code">@fullToken</code>
                                        <button class="btn btn-link btn-sm p-0 ms-2" @onclick="CopyTokenToClipboard" title="Kopier token">
                                            <i class="bi bi-clipboard"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }

                @if (currentUser.Role == "Admin")
                {
                    <div class="mt-3">
                        <h6 class="text-muted">Administrator Funktioner</h6>
                        <div class="btn-group" role="group">
                            <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToAdminUsers">
                                <i class="bi bi-people me-1"></i>
                                Administrer Brugere
                            </button>
                            <button class="btn btn-outline-info btn-sm" @onclick="NavigateToAdminHotels ">
                                <i class="bi bi-building me-1"></i>
                                Administrer Hoteller
                            </button>
                        </div>
                    </div>
                }

                <div class="mt-3">
                    <h6 class="text-muted">Handlinger</h6>
                    <div class="btn-group" role="group">
                        <button class="btn btn-outline-secondary btn-sm" @onclick="RefreshUserInfo">
                            <i class="bi bi-arrow-clockwise me-1"></i>
                            Opdater Info
                        </button>
                        <button class="btn btn-outline-primary btn-sm" @onclick="NavigateToRooms">
                            <i class="bi bi-search me-1"></i>
                            S√∏g Vaerelser
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (isLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Indlaeser...</span>
            </div>
            <p class="mt-2 text-muted">Henter bruger information...</p>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <h5>Ikke logget ind</h5>
            <p>Du skal vaere logget ind for at se denne side.</p>
            <button class="btn btn-primary" @onclick="NavigateToLogin">
                G√• til login
            </button>
        </div>
    }
</div>

<style>
    .vacation-user-profile {
        max-width: 1000px;
        margin: 0 auto;
        padding: 2rem;
        min-height: 100vh;
    }

    /* Vacation Profile Card */
    .vacation-profile-card {
        background: rgba(255, 255, 255, 0.95);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 24px;
        box-shadow: 0 20px 60px rgba(59, 130, 246, 0.15);
        backdrop-filter: blur(30px);
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .vacation-profile-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 25px 80px rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.3);
    }

    .vacation-profile-header {
        background: linear-gradient(135deg, #e0f2fe, #f0fdf4);
        border-bottom: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 24px 24px 0 0;
        padding: 2rem;
        position: relative;
        overflow: hidden;
    }

    .card-header::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, 
            rgba(99, 102, 241, 0.1) 0%, 
            rgba(139, 92, 246, 0.05) 50%, 
            rgba(59, 130, 246, 0.1) 100%);
        pointer-events: none;
    }

    .vacation-profile-header h4 {
        color: #1c1917;
        font-weight: 700;
        font-size: 1.75rem;
        position: relative;
        z-index: 1;
        margin: 0;
        background: linear-gradient(135deg, #3b82f6, #10b981);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
    }

    .vacation-section-title {
        color: #3b82f6 !important;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
    }

    .card-header .btn {
        position: relative;
        z-index: 1;
    }

    .card-body {
        padding: 2.5rem;
        background: transparent;
    }

    /* Vacation Table Styling */
    .table {
        color: #1c1917;
        background: transparent;
    }

    .table td {
        padding: 1rem 0;
        vertical-align: middle;
        border: none;
        border-bottom: 1px solid rgba(59, 130, 246, 0.1);
    }

    .table td:first-child {
        font-weight: 600;
        color: #6b7280;
        width: 40%;
    }

    .table td:last-child {
        color: #1c1917;
        font-weight: 500;
    }

    /* Modern Badge Styling */
    .badge {
        font-size: 0.8rem;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2);
        transition: all 0.3s ease;
    }

    .badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }

    /* Section Headers */
    .text-muted {
        color: #64748b !important;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.1em;
        margin-bottom: 1.5rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid rgba(99, 102, 241, 0.2);
    }

    /* Modern Button Groups */
    .btn-group {
        gap: 0.75rem;
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 0;
    }

    .btn-group .btn {
        margin-right: 0;
        border-radius: 12px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        border: none;
        backdrop-filter: blur(10px);
    }

    .btn-group .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .btn-group .btn:hover::before {
        left: 100%;
    }

    .btn-outline-primary {
        background: rgba(99, 102, 241, 0.1);
        border: 1px solid rgba(99, 102, 241, 0.3);
        color: #a78bfa;
    }

    .btn-outline-primary:hover {
        background: rgba(99, 102, 241, 0.2);
        border-color: rgba(99, 102, 241, 0.5);
        color: #c4b5fd;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
    }

    .btn-outline-secondary {
        background: rgba(71, 85, 105, 0.1);
        border: 1px solid rgba(71, 85, 105, 0.3);
        color: #94a3b8;
    }

    .btn-outline-secondary:hover {
        background: rgba(71, 85, 105, 0.2);
        border-color: rgba(71, 85, 105, 0.5);
        color: #cbd5e1;
        transform: translateY(-2px);
    }

    .btn-outline-info {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.3);
        color: #93c5fd;
    }

    .btn-outline-info:hover {
        background: rgba(59, 130, 246, 0.2);
        border-color: rgba(59, 130, 246, 0.5);
        color: #bfdbfe;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(59, 130, 246, 0.3);
    }

    .btn-outline-danger {
        background: rgba(239, 68, 68, 0.1);
        border: 1px solid rgba(239, 68, 68, 0.3);
        color: #fca5a5;
    }

    .btn-outline-danger:hover {
        background: rgba(239, 68, 68, 0.2);
        border-color: rgba(239, 68, 68, 0.5);
        color: #fecaca;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(239, 68, 68, 0.3);
    }

    /* Code Styling */
    code {
        background: rgba(15, 15, 35, 0.8);
        color: #a78bfa;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        font-size: 0.85rem;
        font-family: 'JetBrains Mono', 'Fira Code', monospace;
        border: 1px solid rgba(99, 102, 241, 0.2);
        backdrop-filter: blur(10px);
    }

    .alert-info {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
    }

    .alert-info code {
        background: rgba(15, 15, 35, 0.6);
        border: 1px solid rgba(59, 130, 246, 0.3);
    }

    /* Loading States */
    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3em;
        border-color: rgba(99, 102, 241, 0.3);
        border-right-color: #6366f1;
    }

    .alert-warning {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid rgba(245, 158, 11, 0.2);
        border-radius: 16px;
        padding: 2rem;
        text-align: center;
        backdrop-filter: blur(10px);
    }

    .alert-warning h5 {
        color: #fbbf24;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .alert-warning p {
        color: #fcd34d;
        margin-bottom: 1.5rem;
    }

    /* Animations */
    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .card {
        animation: slideInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1);
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .user-profile {
            padding: 1rem;
        }
        
        .card-header,
        .card-body {
            padding: 1.5rem;
        }
        
        .card-header h4 {
            font-size: 1.5rem;
        }
        
        .btn-group {
            flex-direction: column;
        }
        
        .btn-group .btn {
            width: 100%;
            margin-bottom: 0.5rem;
        }
        
        .table td {
            padding: 0.75rem 0;
        }
        
        .table td:first-child {
            width: 35%;
            font-size: 0.9rem;
        }
    }

    /* JWT Token Analysis Styling */
    .jwt-section-card {
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(99, 102, 241, 0.2);
        border-radius: 16px;
        padding: 2rem;
        margin-bottom: 1.5rem;
        backdrop-filter: blur(10px);
        transition: all 0.3s ease;
        height: 100%;
        min-height: 350px;
    }

    .jwt-section-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.15);
        border-color: rgba(99, 102, 241, 0.3);
    }

    .jwt-section-header {
        color: #6366f1;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        border-bottom: 2px solid rgba(99, 102, 241, 0.2);
        padding-bottom: 0.75rem;
    }

    .jwt-section-content {
        min-height: 280px;
        display: flex;
        flex-direction: column;
    }

    .jwt-json {
        background: rgba(15, 15, 35, 0.9);
        color: #a78bfa;
        padding: 1.5rem;
        border-radius: 12px;
        font-size: 0.8rem;
        font-family: 'JetBrains Mono', 'Fira Code', monospace;
        border: 1px solid rgba(99, 102, 241, 0.3);
        backdrop-filter: blur(10px);
        max-height: 400px;
        overflow-y: auto;
        white-space: pre-wrap;
        word-break: break-word;
        flex-grow: 1;
        line-height: 1.4;
    }

    .signature-info p {
        margin-bottom: 0.75rem;
        font-size: 0.95rem;
    }

    .signature-info strong {
        color: #6366f1;
    }

    .signature-code {
        background: rgba(15, 15, 35, 0.8);
        color: #fbbf24;
        padding: 0.75rem;
        border-radius: 8px;
        font-size: 0.75rem;
        font-family: 'JetBrains Mono', 'Fira Code', monospace;
        border: 1px solid rgba(245, 158, 11, 0.3);
        word-break: break-all;
        display: block;
        margin-top: 0.75rem;
        line-height: 1.3;
    }

    .validation-details {
        background: rgba(99, 102, 241, 0.05);
        border: 1px solid rgba(99, 102, 241, 0.1);
        border-radius: 12px;
        padding: 1rem;
        backdrop-filter: blur(10px);
    }

    .validation-details p {
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .validation-details strong {
        color: #6366f1;
    }

    /* Token Status Badge Enhancements */
    .badge.bg-success {
        background: linear-gradient(135deg, #10b981, #059669) !important;
        border: 1px solid rgba(16, 185, 129, 0.3);
    }

    .badge.bg-danger {
        background: linear-gradient(135deg, #ef4444, #dc2626) !important;
        border: 1px solid rgba(239, 68, 68, 0.3);
    }

    .badge.bg-warning {
        background: linear-gradient(135deg, #f59e0b, #d97706) !important;
        border: 1px solid rgba(245, 158, 11, 0.3);
    }

    /* New styles for full token display */
    .token-display {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-top: 0.5rem;
    }

    .full-token-code {
        background: rgba(15, 15, 35, 0.8);
        color: #a78bfa;
        padding: 0.75rem 1rem;
        border-radius: 8px;
        font-size: 0.75rem;
        font-family: 'JetBrains Mono', 'Fira Code', monospace;
        border: 1px solid rgba(99, 102, 241, 0.2);
        backdrop-filter: blur(10px);
        flex-grow: 1;
        overflow-x: auto;
        white-space: pre-wrap;
        word-break: break-word;
        max-height: 200px;
        overflow-y: auto;
    }

    .alert-info {
        background: rgba(59, 130, 246, 0.1);
        border: 1px solid rgba(59, 130, 246, 0.2);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
    }

    .alert-info h6 {
        color: #3b82f6;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .alert-warning {
        background: rgba(245, 158, 11, 0.1);
        border: 1px solid rgba(245, 158, 11, 0.2);
        border-radius: 16px;
        padding: 1.5rem;
        backdrop-filter: blur(10px);
    }

    .alert-warning h6 {
        color: #f59e0b;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .alert-warning ul {
        color: #fbbf24;
        margin-bottom: 0;
    }

    .alert-warning li {
        margin-bottom: 0.25rem;
    }

    /* New styles for claims summary */
    .claims-summary {
        background: rgba(99, 102, 241, 0.05);
        border: 1px solid rgba(99, 102, 241, 0.1);
        border-radius: 12px;
        padding: 1rem;
        backdrop-filter: blur(10px);
    }

    .claims-summary p {
        margin-bottom: 0.5rem;
        font-size: 0.9rem;
    }

    .claims-summary strong {
        color: #6366f1;
    }

    /* Signature Validation Styling */
    .signature-validation-card {
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(99, 102, 241, 0.2);
        border-radius: 16px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .signature-validation-card .input-group {
        margin-bottom: 1.5rem;
    }

    .signature-validation-card .input-group-text {
        background: rgba(99, 102, 241, 0.1);
        border: 1px solid rgba(99, 102, 241, 0.3);
        color: #6366f1;
        border-radius: 12px 0 0 12px;
        font-weight: 600;
        font-size: 0.9rem;
    }

    .signature-validation-card .form-control {
        border: 1px solid rgba(99, 102, 241, 0.3);
        border-radius: 0 12px 12px 0;
        font-size: 0.9rem;
        padding-left: 1rem;
        padding-right: 1rem;
    }

    .signature-validation-card .btn {
        border-radius: 12px;
        font-weight: 600;
        padding: 0.75rem 1.5rem;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        border: none;
        backdrop-filter: blur(10px);
    }

    .signature-validation-card .btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s;
    }

    .signature-validation-card .btn:hover::before {
        left: 100%;
    }

    .signature-validation-card .btn:hover {
        background: rgba(99, 102, 241, 0.2);
        border-color: rgba(99, 102, 241, 0.5);
        color: #c4b5fd;
        transform: translateY(-2px);
        box-shadow: 0 8px 25px rgba(99, 102, 241, 0.3);
    }

    .signature-validation-card .btn:disabled {
        background: rgba(99, 102, 241, 0.1);
        border-color: rgba(99, 102, 241, 0.3);
        color: #a78bfa;
        cursor: not-allowed;
    }

    .signature-status-card {
        background: rgba(255, 255, 255, 0.9);
        border: 1px solid rgba(99, 102, 241, 0.2);
        border-radius: 16px;
        padding: 2rem;
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
    }

    .signature-status-header {
        color: #6366f1;
        font-weight: 700;
        font-size: 1.1rem;
        margin-bottom: 1.5rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        border-bottom: 2px solid rgba(99, 102, 241, 0.2);
        padding-bottom: 0.75rem;
    }

    .signature-status-content {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 150px;
    }

    .signature-valid {
        color: #10b981;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .signature-invalid {
        color: #ef4444;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .signature-unknown {
        color: #f59e0b;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .signature-info-details {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid rgba(99, 102, 241, 0.1);
        font-size: 0.9rem;
        color: #64748b;
    }

    .signature-info-details p {
        margin-bottom: 0.5rem;
    }

    .signature-info-details strong {
        color: #6366f1;
    }
</style>

@code {
    private AuthUserInfo? currentUser;
    private bool isLoading = true;
    private string tokenPreview = string.Empty;
    private string fullToken = string.Empty;
    private bool showFullToken = false;
    private JwtToken? decodedToken;
    private TokenValidationResult? tokenValidationResult;
    private string serverSecretKey = string.Empty;
    private string signatureValidationResult = string.Empty;
    private bool isSignatureValid = false;
    private bool hasValidatedSignature = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserInfo();
        
        // Subscribe to authentication state changes
        AuthService.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task LoadUserInfo()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            if (await AuthService.IsAuthenticatedAsync())
            {
                currentUser = await AuthService.GetCurrentUserAsync();
                fullToken = await AuthService.GetTokenAsync() ?? string.Empty;
                tokenPreview = fullToken.Length > 20 ? fullToken.Substring(0, 20) : fullToken;
                decodedToken = JwtToken.Decode(fullToken);
                tokenValidationResult = TokenValidationResult.Validate(decodedToken);
            }
            else
            {
                currentUser = null;
                Navigation.NavigateTo("/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Fejl ved indlaesning af bruger info: {ex.Message}");
            currentUser = null;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleLogout()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            await AuthService.LogoutAsync();
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Logout fejl: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task RefreshUserInfo()
    {
        await LoadUserInfo();
    }

    private void ToggleTokenVisibility()
    {
        showFullToken = !showFullToken;
    }

    private string GetRoleBadgeClass(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "bg-danger",
            "user" => "bg-primary",
            "manager" => "bg-warning text-dark",
            _ => "bg-secondary"
        };
    }

    private string GetRoleDisplayName(string role)
    {
        return role.ToLower() switch
        {
            "admin" => "Administrator",
            "user" => "Bruger",
            "manager" => "Manager",
            _ => role
        };
    }

    private async void OnAuthenticationStateChanged(object? sender, bool isAuthenticated)
    {
        if (!isAuthenticated)
        {
            currentUser = null;
            Navigation.NavigateTo("/login");
        }
        else
        {
            await LoadUserInfo();
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private string FormatJson(JsonElement element)
    {
        try
        {
            return JsonSerializer.Serialize(element, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return "Kunne ikke formatere JSON";
        }
    }

    private string FormatJson(Dictionary<string, JsonElement> dict)
    {
        try
        {
            return JsonSerializer.Serialize(dict, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return "Kunne ikke formatere JSON";
        }
    }

    private async Task ValidateToken()
    {
        if (decodedToken != null)
        {
            tokenValidationResult = TokenValidationResult.Validate(decodedToken);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CopyTokenToClipboard()
    {
        if (!string.IsNullOrEmpty(fullToken))
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", fullToken);
                // Vis success besked
                await ShowCopySuccessMessage();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Fejl ved kopiering til clipboard: {ex.Message}");
            }
        }
    }

    private async Task ShowCopySuccessMessage()
    {
        // Her kunne man implementere en toast eller notification
        // For nu logger vi bare til console
        Console.WriteLine("Token kopieret til clipboard!");
    }

    private async Task RefreshToken()
    {
        await LoadUserInfo();
    }

    private void ToggleFullTokenDisplay()
    {
        showFullToken = !showFullToken;
    }

    private async Task ValidateSignatureWithServerKey()
    {
        if (decodedToken == null)
        {
            signatureValidationResult = "Token er ikke afkodet.";
            hasValidatedSignature = true;
            await InvokeAsync(StateHasChanged);
            return;
        }

        try
        {
            // Simpel validering - i en rigtig applikation ville du validere signaturen
            // ved at bruge serverens hemmelige n√∏gle og HMAC algoritmen
            
            if (string.IsNullOrEmpty(serverSecretKey))
            {
                signatureValidationResult = "Indtast venligst server n√∏glen.";
                return;
            }

            // Her kunne du implementere rigtig signature validering
            // For nu demonstrerer vi bare funktionaliteten
            var algorithm = decodedToken.Header.TryGetValue("alg", out var algElement) ? algElement.GetString() : "HS256";
            
            if (algorithm == "HS256" && serverSecretKey.Length > 10)
            {
                signatureValidationResult = "‚úì Signature validering gennemf√∏rt med HS256 algoritme.";
                isSignatureValid = true;
            }
            else
            {
                signatureValidationResult = "‚úó Signature validering fejlede. Tjek algoritme og n√∏gle.";
                isSignatureValid = false;
            }
            
            hasValidatedSignature = true;
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            signatureValidationResult = $"Fejl ved signature validering: {ex.Message}";
            isSignatureValid = false;
            hasValidatedSignature = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void OnServerKeyInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            _ = ValidateSignatureWithServerKey();
        }
    }

    public void Dispose()
    {
        AuthService.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

    public void NavigateTo(string url)
    {
        Navigation.NavigateTo(url);
    }

    public void NavigateToRooms()
    {
        Navigation.NavigateTo("/rooms");
    }

    public void NavigateToAdminUsers()
    {
        Navigation.NavigateTo("/admin/users");
    }

    public void NavigateToAdminHotels()
    {
        Navigation.NavigateTo("/admin/hotels");
    }

    public void NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }
}

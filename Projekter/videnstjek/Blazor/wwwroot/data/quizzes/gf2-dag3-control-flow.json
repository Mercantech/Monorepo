{
    "id": "gf2-kapitel-3-control-flow",
    "title": "GF2 Kapitel 3 - Control Flow",
    "description": "Test din viden om control flow i C#: if/else statements, switch statements, ternary operator, brugerinput og scope",
    "category": "GF2",
    "difficulty": "Begynder",
    "estimatedTime": "8-10 minutter",
    "questions": [
      {
        "id": 1,
        "questionText": "Hvilke af følgende er korrekte if/else statement syntakser i C#?",
        "options": {
          "A": "if (betingelse) { // kode }",
          "B": "if (betingelse) { // kode } else { // kode }",
          "C": "if (betingelse) { // kode } else if (betingelse2) { // kode }",
          "D": "if (betingelse) { // kode } else if (betingelse2) { // kode } else { // kode }"
        },
        "correctAnswers": ["A", "B", "C", "D"],
        "explanations": {
          "A": "✅ Grundlæggende if statement syntaks er korrekt.",
          "B": "✅ If-else statement syntaks er korrekt.",
          "C": "✅ If-else if statement syntaks er korrekt.",
          "D": "✅ Komplet if-else if-else statement syntaks er korrekt."
        },
        "learnMore": {
          "title": "If Statements in C#",
          "description": "Microsofts dokumentation om if statements i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement"
        }
      },
      {
        "id": 2,
        "questionText": "Hvad er den korrekte syntaks for en switch statement i C#?",
        "options": {
          "A": "switch (variabel) { case værdi1: // kode break; }",
          "B": "switch (variabel) { case værdi1: // kode break; default: // kode break; }",
          "C": "switch (variabel) { case værdi1: // kode break; case værdi2: // kode break; default: // kode break; }",
          "D": "Alle ovenstående er korrekte"
        },
        "correctAnswers": ["D"],
        "explanations": {
          "A": "✅ Grundlæggende switch syntaks er korrekt.",
          "B": "✅ Switch med default case er korrekt.",
          "C": "✅ Switch med flere cases og default er korrekt.",
          "D": "✅ Alle syntakser er korrekte - switch kan have 1 eller flere cases, med eller uden default."
        },
        "learnMore": {
          "title": "Switch Statements in C#",
          "description": "Microsofts dokumentation om switch statements i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-switch-statement"
        }
      },
      {
        "id": 3,
        "questionText": "Hvad er den korrekte syntaks for ternary operator i C#?",
        "options": {
          "A": "resultat = (betingelse) ? værdiHvisSand : værdiHvisFalsk;",
          "B": "resultat = betingelse ? værdiHvisSand : værdiHvisFalsk;",
          "C": "resultat = (betingelse) ? værdiHvisSand : værdiHvisFalsk",
          "D": "A og B er begge korrekte"
        },
        "correctAnswers": ["D"],
        "explanations": {
          "A": "✅ Parenteser omkring betingelsen er valgfrie men korrekte.",
          "B": "✅ Parenteser omkring betingelsen er valgfrie men korrekte.",
          "C": "❌ Mangler semikolon i slutningen.",
          "D": "✅ Både A og B er korrekte - parenteser omkring betingelsen er valgfrie."
        },
        "learnMore": {
          "title": "Ternary Operator in C#",
          "description": "Microsofts dokumentation om conditional operator (ternary) i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/conditional-operator"
        }
      },
      {
        "id": 4,
        "questionText": "Hvilke af følgende er korrekte måder at læse brugerinput i C#?",
        "options": {
          "A": "string input = Console.ReadLine();",
          "B": "int.TryParse(Console.ReadLine(), out int number);",
          "C": "double.TryParse(Console.ReadLine(), out double value);",
          "D": "bool.TryParse(Console.ReadLine(), out bool flag);"
        },
        "correctAnswers": ["A", "B", "C", "D"],
        "explanations": {
          "A": "✅ Console.ReadLine() læser tekst input fra brugeren.",
          "B": "✅ int.TryParse() konverterer tekst til heltal med fejlhåndtering.",
          "C": "✅ double.TryParse() konverterer tekst til decimaltal med fejlhåndtering.",
          "D": "✅ bool.TryParse() konverterer tekst til boolean med fejlhåndtering."
        },
        "learnMore": {
          "title": "Console.ReadLine() in C#",
          "description": "Microsofts dokumentation om Console.ReadLine() i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/api/system.console.readline"
        }
      },
      {
        "id": 5,
        "questionText": "Hvad er forskellen mellem lokalt og globalt scope i C#?",
        "options": {
          "A": "Lokalt scope: variabler kun synlige i deres metode/blok",
          "B": "Globalt scope: variabler synlige overalt i programmet",
          "C": "Lokale variabler er sikrere end globale variabler",
          "D": "Alle ovenstående er korrekte"
        },
        "correctAnswers": ["D"],
        "explanations": {
          "A": "✅ Lokale variabler er kun synlige inden for deres metode eller blok.",
          "B": "✅ Globale variabler er synlige fra enhver del af programmet.",
          "C": "✅ Lokale variabler er sikrere da de ikke kan påvirkes fra andre steder.",
          "D": "✅ Alle svar er korrekte - lokalt scope begrænser synlighed, globalt scope gør variabler tilgængelige overalt."
        },
        "learnMore": {
          "title": "Variable Scope in C#",
          "description": "Microsofts dokumentation om variable scope i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/language-specification/basic-concepts#scopes"
        }
      },
      {
        "id": 6,
        "questionText": "Hvilke problemer kan globale variabler skabe i C#?",
        "options": {
          "A": "Utilsigtet ændring fra forskellige steder i koden",
          "B": "Navnekonflikter med lokale variabler",
          "C": "Sværere at teste og vedligeholde koden",
          "D": "Alle ovenstående er korrekte"
        },
        "correctAnswers": ["D"],
        "explanations": {
          "A": "✅ Globale variabler kan ændres fra flere steder, hvilket kan skabe uforudsigelig opførsel.",
          "B": "✅ Navnekonflikter kan opstå når lokale og globale variabler har samme navn.",
          "C": "✅ Globale variabler gør det sværere at isolere og teste specifik funktionalitet.",
          "D": "✅ Alle problemer er korrekte - globale variabler kan skabe alle disse udfordringer."
        },
        "learnMore": {
          "title": "Global Variables Best Practices",
          "description": "Microsofts dokumentation om best practices for variable scope.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/classes-and-structs/local-functions"
        }
      },
      {
        "id": 7,
        "questionText": "Hvad vil følgende kode udskrive? int num = 15; if (num > 10) { Console.WriteLine(\"Større end 10\"); } else if (num > 5) { Console.WriteLine(\"Større end 5\"); } else { Console.WriteLine(\"Mindre end eller lig med 5\"); }",
        "options": {
          "A": "Større end 10",
          "B": "Større end 5",
          "C": "Mindre end eller lig med 5",
          "D": "Ingen af ovenstående"
        },
        "correctAnswers": ["A"],
        "explanations": {
          "A": "✅ Da num = 15 og 15 > 10 er sandt, udføres den første if-blok.",
          "B": "❌ Denne blok udføres kun hvis den første betingelse er falsk.",
          "C": "❌ Denne blok udføres kun hvis begge betingelser er falske.",
          "D": "❌ A er korrekt - koden udskriver 'Større end 10'."
        },
        "learnMore": {
          "title": "If-Else Logic in C#",
          "description": "Microsofts dokumentation om if-else statement logik.",
          "url": "https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/statements/selection-statements#the-if-statement"
        }
      },
      {
        "id": 8,
        "questionText": "Hvilke af følgende er korrekte måder at håndtere brugerinput med fejlhåndtering?",
        "options": {
          "A": "if (int.TryParse(input, out int result)) { // brug result }",
          "B": "if (double.TryParse(input, out double result)) { // brug result }",
          "C": "if (bool.TryParse(input, out bool result)) { // brug result }",
          "D": "Alle ovenstående er korrekte"
        },
        "correctAnswers": ["D"],
        "explanations": {
          "A": "✅ int.TryParse() returnerer true hvis konvertering lykkes, false hvis ikke.",
          "B": "✅ double.TryParse() returnerer true hvis konvertering lykkes, false hvis ikke.",
          "C": "✅ bool.TryParse() returnerer true hvis konvertering lykkes, false hvis ikke.",
          "D": "✅ Alle TryParse() metoder giver sikker fejlhåndtering uden at kaste exceptions."
        },
        "learnMore": {
          "title": "TryParse Methods in C#",
          "description": "Microsofts dokumentation om TryParse metoder i C#.",
          "url": "https://learn.microsoft.com/en-us/dotnet/api/system.int32.tryparse"
        }
      }
    ]
  }
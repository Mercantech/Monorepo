@page "/quizzes"
@using Blazor.Service
@using Blazor.Models
@inject IQuizService QuizService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Quizzer - Videnstjek</PageTitle>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="text-center mb-5">
                <h1 class="display-4 fw-bold text-primary mb-3">Vælg en Quiz</h1>
                <p class="lead">Vælg et emne og test din viden med vores interaktive quizzer</p>
                
                @if (!string.IsNullOrEmpty(categoryFilter))
                {
                    <div class="alert alert-info d-inline-flex align-items-center" role="alert">
                        <i class="fas fa-filter me-2"></i>
                        <span>Filtreret efter: <strong>@GetCategoryDisplayName(categoryFilter)</strong></span>
                        <button type="button" class="btn-close ms-3" @onclick="ClearCategoryFilter" aria-label="Fjern filter"></button>
                    </div>
                }
            </div>

            <!-- Search Section -->
            <div class="row justify-content-center mb-4">
                <div class="col-md-8 col-lg-6">
                    <div class="input-group">
                        <span class="input-group-text bg-primary text-white">
                            <i class="fas fa-search"></i>
                        </span>
                        <input 
                            type="text" 
                            class="form-control form-control-lg" 
                            placeholder="Søg efter quiz titel..." 
                            @bind="searchTerm" 
                            @bind:event="oninput"
                            @onkeyup="HandleSearch"
                        />
                        @if (!string.IsNullOrEmpty(searchTerm))
                        {
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="fas fa-times"></i>
                            </button>
                        }
                    </div>
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <div class="text-center mt-2">
                            <small class="text-muted">
                                @if (filteredQuizzes != null)
                                {
                                    @($"Fundet {filteredQuizzes.Count} quiz(zer) for \"{searchTerm}\"")
                                }
                            </small>
                        </div>
                    }
                </div>
            </div>

            @if (quizzes == null)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Indlæser...</span>
                    </div>
                    <p class="mt-3">Indlæser quizzer...</p>
                </div>
            }
            else if (!GetDisplayQuizzes().Any())
            {
                <div class="text-center">
                    @if (!string.IsNullOrEmpty(searchTerm))
                    {
                        <div class="alert alert-warning" role="alert">
                            <i class="fas fa-search me-2"></i>
                            Ingen quizzer fundet for "@searchTerm". Prøv at søge efter noget andet.
                        </div>
                        <button class="btn btn-outline-primary" @onclick="ClearSearch">
                            <i class="fas fa-arrow-left me-2"></i>Tilbage til alle quizzer
                        </button>
                    }
                    else
                    {
                        <div class="alert alert-info" role="alert">
                            <i class="fas fa-info-circle me-2"></i>
                            Ingen quizzer tilgængelige for øjeblikket.
                        </div>
                    }
                </div>
            }
            else
            {
                <!-- All quizzes in a simple grid -->
                <div class="row g-4">
                    @foreach (var quiz in GetDisplayQuizzes())
                    {
                        <div class="col-md-6 col-lg-4">
                            <div class="quiz-card card h-100 shadow-lg border-0 d-flex flex-column">
                                <div class="card-body p-4 d-flex flex-column">
                                    <div class="d-flex justify-content-between align-items-start mb-3">
                                        <h5 class="card-title text-primary mb-0">@quiz.Title</h5>
                                        <span class="badge bg-@GetDifficultyColor(quiz.Difficulty)">@quiz.Difficulty</span>
                                    </div>
                                    
                                    <p class="card-text text-muted mb-3">@quiz.Description</p>
                                    
                                    <div class="quiz-meta mb-3">
                                        <div class="d-flex align-items-center mb-2">
                                            <i class="fas fa-clock text-success me-2"></i>
                                            <small class="text-muted">@quiz.EstimatedTime</small>
                                        </div>
                                        <div class="d-flex align-items-center">
                                            <i class="fas fa-question-circle text-info me-2"></i>
                                            <small class="text-muted">@quiz.Questions.Count spørgsmål</small>
                                        </div>
                                    </div>
                                    
                                    <div class="mt-auto">
                                        <button class="btn btn-primary w-100" @onclick="() => StartQuiz(quiz.Id)">
                                            <i class="fas fa-play me-2"></i>Start Quiz
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Quiz>? quizzes;
    private List<Quiz>? filteredQuizzes;
    private string searchTerm = string.Empty;
    private string? categoryFilter = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            quizzes = await QuizService.GetAllQuizzesAsync();
            await CheckAndApplyCategoryFilter();
            
            // Subscribe to navigation changes
            Navigation.LocationChanged += OnLocationChanged;
        }
        catch (Exception)
        {
            // Log error would be handled by the service
            quizzes = new List<Quiz>();
        }
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        // Check if we're still on the quizzes page
        if (e.Location.Contains("/quizzes"))
        {
            await InvokeAsync(async () =>
            {
                await CheckAndApplyCategoryFilter();
            });
        }
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= OnLocationChanged;
    }

    private Task CheckAndApplyCategoryFilter()
    {
        // Check for category filter in URL
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("category", out var category))
        {
            var newCategoryFilter = category.FirstOrDefault();
            if (newCategoryFilter != categoryFilter)
            {
                categoryFilter = newCategoryFilter;
                ApplyCategoryFilter();
                StateHasChanged();
            }
        }
        else
        {
            // No category filter, clear any existing filter
            if (categoryFilter != null)
            {
                categoryFilter = null;
                filteredQuizzes = null;
                StateHasChanged();
            }
        }
        
        return Task.CompletedTask;
    }

    private void HandleSearch()
    {
        if (quizzes == null) return;

        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredQuizzes = null;
        }
        else
        {
            filteredQuizzes = quizzes
                .Where(q => q.Title.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        filteredQuizzes = null;
    }

    private IEnumerable<Quiz> GetDisplayQuizzes()
    {
        return filteredQuizzes ?? quizzes ?? new List<Quiz>();
    }

    private void StartQuiz(string quizId)
    {
        Navigation.NavigateTo($"/quiz/{quizId}");
    }

    private string GetDifficultyColor(string difficulty)
    {
        return difficulty.ToLower() switch
        {
            "begynder" => "success",
            "mellem" => "warning",
            "avanceret" => "danger",
            _ => "secondary"
        };
    }

    
    private void ApplyCategoryFilter()
    {
        if (quizzes == null || string.IsNullOrEmpty(categoryFilter)) return;
        
        filteredQuizzes = categoryFilter switch
        {
            "gf2" => quizzes.Where(q => HasCategory(q, "gf2")).ToList(),
            "backend" => quizzes.Where(q => HasCategory(q, "backend")).ToList(),
            "frontend" => quizzes.Where(q => HasCategory(q, "frontend")).ToList(),
            "other" => quizzes.Where(q => q.CategoryPrefix == "other").ToList(),
            _ => quizzes.Where(q => HasCategory(q, categoryFilter)).ToList()
        };
        
        StateHasChanged();
    }
    
    private bool HasCategory(Quiz quiz, string category)
    {
        var allCategories = new List<string>();
        
        if (!string.IsNullOrEmpty(quiz.Category))
            allCategories.Add(quiz.Category.ToLowerInvariant());
        
        allCategories.AddRange(quiz.Categories.Select(c => c.ToLowerInvariant()));
        
        return allCategories.Contains(category.ToLowerInvariant());
    }
    
    
    private void ClearCategoryFilter()
    {
        categoryFilter = null;
        filteredQuizzes = null;
        StateHasChanged();
        Navigation.NavigateTo("/quizzes");
    }

    private string GetCategoryIcon(string category)
    {
        return category switch
        {
            var c when c.Contains("GF2") => "graduation-cap",
            var c when c.Contains("Entity Framework") => "database",
            var c when c.Contains("Security") => "shield-alt",
            var c when c.Contains("Caching") => "memory",
            var c when c.Contains("API") => "plug",
            var c when c.Contains("SOLID") => "cogs",
            var c when c.Contains("OOP") => "object-group",
            var c when c.Contains("Error") => "exclamation-triangle",
            var c when c.Contains("Data") => "file-alt",
            var c when c.Contains("XML") => "code",
            var c when c.Contains("Bogus") => "random",
            _ => "book"
        };
    }
    
    private string GetCategoryDisplayName(string categoryPrefix)
    {
        return categoryPrefix switch
        {
            "gf2" => "GF2 - Grundlæggende Programmering",
            "backend" => "Backend Teknologier",
            "frontend" => "Frontend Teknologier",
            "gf2-dag1" => "GF2 - Grundlæggende C#",
            "gf2-dag2" => "GF2 - Expressions & Operatører",
            "gf2-dag3" => "GF2 - Control Flow",
            "gf2-dag4" => "GF2 - Klasser & Objekter",
            "gf2-dag6" => "GF2 - Arrays & Datastrukturer",
            "efcore" => "Entity Framework",
            "api" => "API Integration",
            "caching" => "Caching & Redis",
            "security" => "Security",
            "data" => "Data Handling",
            "blazor" => "Blazor",
            "css" => "CSS & Styling",
            "javascript" => "JavaScript",
            _ => categoryPrefix
        };
    }
}
